name: release

on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - 'pyproject.toml'
      - '**.md'
      - '**.rst'
      - '**.yml'
  workflow_dispatch:

  workflow_call:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[all]

    - name: Get version
      id: version
      run: |
        VERSION=$(python -c "
        try:
            import tomllib
        except ImportError:
            import tomli as tomllib
        with open('pyproject.toml', 'rb') as f:
            print(tomllib.load(f)['project']['version'])
        ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs/_build/html/'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Build package
      if: steps.check_release.outputs.exists == 'false'
      run: |
        python -m build

    - name: Create GitHub Release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        gh release create "v${{ steps.version.outputs.version }}" \
          --title "Release v${{ steps.version.outputs.version }}" \
          --notes "Automated release for version ${{ steps.version.outputs.version }}" \
          --generate-notes \
          dist/*
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: steps.check_release.outputs.exists == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://upload.pypi.org/legacy/